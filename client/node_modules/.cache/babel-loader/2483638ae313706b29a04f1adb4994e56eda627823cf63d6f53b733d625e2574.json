{"ast":null,"code":"const url = 'http://localhost:3001';\nexport const postImage = async canvas => {\n  let imageBlob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));\n  let formData = new FormData();\n  formData.append('image', imageBlob, 'image.png');\n  // modify the url accordingly\n  let response = await fetch('http://localhost:3001/image', {\n    method: 'POST',\n    body: formData\n  });\n  // convert the response to json, modify it accordingly based on the returned response from your remote server\n  // let result = await response.json();\n};\n\n// export const postEvent = async (event) => {\n//   const requestOptions = {\n//     method: 'POST',\n//     headers: { 'Content-Type': 'application/json' },\n//     body: JSON.stringify(event),\n//   };\n//   await fetch(url + '/event', requestOptions);\n// };\n\nexport const getSources = async () => {\n  let res = await fetch(url + '/image');\n  let buffer_images = await res.text();\n  let json_images = JSON.parse(buffer_images);\n  let sources = json_images.map(source => `data:image/png;base64,${source}`);\n  return sources;\n};","map":{"version":3,"names":["url","postImage","canvas","imageBlob","Promise","resolve","toBlob","formData","FormData","append","response","fetch","method","body","getSources","res","buffer_images","text","json_images","JSON","parse","sources","map","source"],"sources":["/Users/valgaug/Documents/Coding/CodeWorks/SoloProject/solo-project/solo-project-proposal/client/src/ApiService.js"],"sourcesContent":["const url = 'http://localhost:3001';\n\nexport const postImage = async (canvas) => {\n  let imageBlob = await new Promise((resolve) =>\n    canvas.toBlob(resolve, 'image/png')\n  );\n  let formData = new FormData();\n  formData.append('image', imageBlob, 'image.png');\n  // modify the url accordingly\n  let response = await fetch('http://localhost:3001/image', {\n    method: 'POST',\n    body: formData,\n  });\n  // convert the response to json, modify it accordingly based on the returned response from your remote server\n  // let result = await response.json();\n};\n\n// export const postEvent = async (event) => {\n//   const requestOptions = {\n//     method: 'POST',\n//     headers: { 'Content-Type': 'application/json' },\n//     body: JSON.stringify(event),\n//   };\n//   await fetch(url + '/event', requestOptions);\n// };\n\nexport const getSources = async () => {\n  let res = await fetch(url + '/image');\n  let buffer_images = await res.text();\n  let json_images = JSON.parse(buffer_images);\n  let sources = json_images.map((source) => `data:image/png;base64,${source}`);\n  return sources;\n};\n"],"mappings":"AAAA,MAAMA,GAAG,GAAG,uBAAuB;AAEnC,OAAO,MAAMC,SAAS,GAAG,MAAOC,MAAM,IAAK;EACzC,IAAIC,SAAS,GAAG,MAAM,IAAIC,OAAO,CAAEC,OAAO,IACxCH,MAAM,CAACI,MAAM,CAACD,OAAO,EAAE,WAAW,CAAC,CACpC;EACD,IAAIE,QAAQ,GAAG,IAAIC,QAAQ,EAAE;EAC7BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEN,SAAS,EAAE,WAAW,CAAC;EAChD;EACA,IAAIO,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;IACxDC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEN;EACR,CAAC,CAAC;EACF;EACA;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMO,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAIC,GAAG,GAAG,MAAMJ,KAAK,CAACX,GAAG,GAAG,QAAQ,CAAC;EACrC,IAAIgB,aAAa,GAAG,MAAMD,GAAG,CAACE,IAAI,EAAE;EACpC,IAAIC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC;EAC3C,IAAIK,OAAO,GAAGH,WAAW,CAACI,GAAG,CAAEC,MAAM,IAAM,yBAAwBA,MAAO,EAAC,CAAC;EAC5E,OAAOF,OAAO;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}