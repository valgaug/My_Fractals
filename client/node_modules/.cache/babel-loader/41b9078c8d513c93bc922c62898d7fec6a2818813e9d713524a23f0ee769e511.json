{"ast":null,"code":"// import React, { useState, useRef } from 'react';\n// import Sketch from 'react-p5';\n// import './style.css';\n// import canvasToImage from 'canvas-to-image';\n// import * as ApiService from '../../ApiService';\n\n// function Fern({ hide, setHide, post, setPost }) {\n//   const canvasRef = useRef(null);\n\n//   const setup = (p5, canvasParentRef) => {\n//     p5.createCanvas(730, 520).parent(canvasParentRef);\n//     canvasRef.current = p5.canvas;\n//   };\n\n//   const draw = (p5) => {\n//     let x = 0;\n//     let y = 0;\n\n//     const nextPoint = () => {\n//       let nextX;\n//       let nextY;\n\n//       let r = p5.random(1);\n\n//       if (r < 0.01) {\n//         //1\n//         nextX = 0;\n//         nextY = 0.16 * y;\n//       } else if (r < 0.86) {\n//         //2\n//         nextX = 0.85 * x + 0.04 * y;\n//         nextY = -0.04 * x + 0.85 * y + 1.6;\n//       } else if (r < 0.93) {\n//         //3\n//         nextX = 0.2 * x + -0.26 * y;\n//         nextY = 0.23 * x + 0.22 * y + 1.6;\n//       } else {\n//         //4\n//         nextX = -0.15 * x + 0.28 * y;\n//         nextY = 0.26 * x + 0.24 * y + 0.44;\n//       }\n\n//       x = nextX;\n//       y = nextY;\n//     };\n\n//     for (let i = 0; i < 1000; i++) {\n//       p5.drawPoint();\n//       nextPoint();\n//     }\n//   };\n\n//   const saveCanvasAsImage = async () => {\n//     canvasToImage(canvasRef.current);\n//   };\n\n//   const postCanvasAsImage = async () => {\n//     setHide(true);\n//     await ApiService.postImage(canvasRef.current);\n//     setPost(!post);\n//   };\n\n//   return (\n//     <div className='tree' style={{ display: hide ? 'none' : 'block' }}>\n//       <Sketch setup={setup} draw={draw} />\n\n//       <form>\n//         <div className='parameter'>\n//           <span>Iterations:</span>\n//           {/* <label>{iteration}</label> */}\n//           <input\n//             type='range'\n//             name='tree'\n//             id='iteration'\n//             min='0'\n//             max='12'\n//             step='1'\n//             // value={iteration}\n//             onChange={(e) => {\n//               // setIteration(e.target.value);\n//             }}\n//           ></input>\n//         </div>\n//         <div className='parameter'>\n//           <span>Right Angle:</span>\n//           {/* <label>{rightAngle}째</label> */}\n//           <input\n//             type='range'\n//             name='tree'\n//             id='angle'\n//             min='0'\n//             max='90'\n//             step='1'\n//             // value={rightAngle}\n//             onChange={(e) => {\n//               // setRightAngle(e.target.value);\n//             }}\n//           ></input>\n//           <br />\n//         </div>\n//         <div className='parameter'>\n//           <span>Left Angle:</span>\n//           {/* <label>{rightAngle}째</label> */}\n//           <input\n//             type='range'\n//             name='tree'\n//             id='angle'\n//             min='0'\n//             max='90'\n//             step='1'\n//             // value={leftAngle}\n//             onChange={(e) => {\n//               // setLeftAngle(e.target.value);\n//             }}\n//           ></input>\n//           <br />\n//         </div>\n//         <div className='parameter'>\n//           <span>Branch ratio:</span>\n//           {/* <label>{ratio}</label> */}\n//           <input\n//             type='range'\n//             name='tree'\n//             id='ratio'\n//             min='0.5'\n//             max='0.79'\n//             step='0.01'\n//             // value={ratio}\n//             onChange={(e) => {\n//               // setRatio(e.target.value);\n//             }}\n//           ></input>\n//         </div>\n//       </form>\n//       <div className='buttons'>\n//         <button onClick={postCanvasAsImage}>Submit</button>\n//         <button onClick={saveCanvasAsImage}>Download</button>\n//       </div>\n//       <div className='close' onClick={() => setHide(true)}>\n//         X\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Fern;","map":{"version":3,"names":[],"sources":["/Users/valgaug/Documents/Coding/CodeWorks/SoloProject/solo-project/solo-project-proposal/client/src/Components/05-02-Fern/index.js"],"sourcesContent":["// import React, { useState, useRef } from 'react';\n// import Sketch from 'react-p5';\n// import './style.css';\n// import canvasToImage from 'canvas-to-image';\n// import * as ApiService from '../../ApiService';\n\n// function Fern({ hide, setHide, post, setPost }) {\n//   const canvasRef = useRef(null);\n\n//   const setup = (p5, canvasParentRef) => {\n//     p5.createCanvas(730, 520).parent(canvasParentRef);\n//     canvasRef.current = p5.canvas;\n//   };\n\n//   const draw = (p5) => {\n//     let x = 0;\n//     let y = 0;\n\n//     const nextPoint = () => {\n//       let nextX;\n//       let nextY;\n\n//       let r = p5.random(1);\n\n//       if (r < 0.01) {\n//         //1\n//         nextX = 0;\n//         nextY = 0.16 * y;\n//       } else if (r < 0.86) {\n//         //2\n//         nextX = 0.85 * x + 0.04 * y;\n//         nextY = -0.04 * x + 0.85 * y + 1.6;\n//       } else if (r < 0.93) {\n//         //3\n//         nextX = 0.2 * x + -0.26 * y;\n//         nextY = 0.23 * x + 0.22 * y + 1.6;\n//       } else {\n//         //4\n//         nextX = -0.15 * x + 0.28 * y;\n//         nextY = 0.26 * x + 0.24 * y + 0.44;\n//       }\n\n//       x = nextX;\n//       y = nextY;\n//     };\n\n//     for (let i = 0; i < 1000; i++) {\n//       p5.drawPoint();\n//       nextPoint();\n//     }\n//   };\n\n//   const saveCanvasAsImage = async () => {\n//     canvasToImage(canvasRef.current);\n//   };\n\n//   const postCanvasAsImage = async () => {\n//     setHide(true);\n//     await ApiService.postImage(canvasRef.current);\n//     setPost(!post);\n//   };\n\n//   return (\n//     <div className='tree' style={{ display: hide ? 'none' : 'block' }}>\n//       <Sketch setup={setup} draw={draw} />\n\n//       <form>\n//         <div className='parameter'>\n//           <span>Iterations:</span>\n//           {/* <label>{iteration}</label> */}\n//           <input\n//             type='range'\n//             name='tree'\n//             id='iteration'\n//             min='0'\n//             max='12'\n//             step='1'\n//             // value={iteration}\n//             onChange={(e) => {\n//               // setIteration(e.target.value);\n//             }}\n//           ></input>\n//         </div>\n//         <div className='parameter'>\n//           <span>Right Angle:</span>\n//           {/* <label>{rightAngle}째</label> */}\n//           <input\n//             type='range'\n//             name='tree'\n//             id='angle'\n//             min='0'\n//             max='90'\n//             step='1'\n//             // value={rightAngle}\n//             onChange={(e) => {\n//               // setRightAngle(e.target.value);\n//             }}\n//           ></input>\n//           <br />\n//         </div>\n//         <div className='parameter'>\n//           <span>Left Angle:</span>\n//           {/* <label>{rightAngle}째</label> */}\n//           <input\n//             type='range'\n//             name='tree'\n//             id='angle'\n//             min='0'\n//             max='90'\n//             step='1'\n//             // value={leftAngle}\n//             onChange={(e) => {\n//               // setLeftAngle(e.target.value);\n//             }}\n//           ></input>\n//           <br />\n//         </div>\n//         <div className='parameter'>\n//           <span>Branch ratio:</span>\n//           {/* <label>{ratio}</label> */}\n//           <input\n//             type='range'\n//             name='tree'\n//             id='ratio'\n//             min='0.5'\n//             max='0.79'\n//             step='0.01'\n//             // value={ratio}\n//             onChange={(e) => {\n//               // setRatio(e.target.value);\n//             }}\n//           ></input>\n//         </div>\n//       </form>\n//       <div className='buttons'>\n//         <button onClick={postCanvasAsImage}>Submit</button>\n//         <button onClick={saveCanvasAsImage}>Download</button>\n//       </div>\n//       <div className='close' onClick={() => setHide(true)}>\n//         X\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Fern;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}