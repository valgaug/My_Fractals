{"ast":null,"code":"var _jsxFileName = \"/Users/valgaug/Documents/Coding/CodeWorks/SoloProject/solo-project/solo-project-proposal/client/src/Components/06-00-Documentation/index.js\";\nimport React from 'react';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Doc() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"doc\",\n    id: \"doc-id\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"firstHeading\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"What is a fractal?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"A fractal is a never ending pattern that repeats itself at different scales. This property is called \\u201CSelf-Similarity.\\u201D Fractals are extremely complex, sometimes infinitely complex - meaning you can zoom in and find the same shapes forever. Amazingly, fractals are extremely simple to make. A fractal is made by repeating a simple process again and again. You can find fractals in Nature, in Geometry and in Algebra.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"secondHeading\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Natural Fractal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Branching\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Fractals are found all over nature, spanning a huge range of scales. We find the same patterns again and again, from the tiny branching of our blood vessels and neurons to the branching of trees, lightning bolts, and river networks. Regardless of scale, these patterns are all formed by repeating a simple branching process. A fractal is a picture that tells the story of the process that created it.\", /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Spiral\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The spiral is another extremely common fractal in nature, found over a huge range of scales. Biological spirals are found in the plant and animal kingdoms, and non-living spirals are found in the turbulent swirling of fluids and in the pattern of star formation in galaxies. All fractals are formed by simple repetition, and combining expansion and rotation is enough to generate the ubiquitous spiral.\", /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"secondHeading\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Geometric Fractal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Purely geometric fractals can be made by repeating a simple process. The Sierpinski Triangle is made by repeatedly removing the middle triangle from the prior generation. The number of colored triangles increases by a factor of 3 each step, 1,3,9,27,81,243,729, etc.\", /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), \"The Koch Curve is made by repeatedly replacing each segment of a generator shape with a smaller copy of the generator. At each step, or iteration, the total length of the curve gets longer, eventually approaching infinity. Much like a coastline, the length of the curve increases the more closely you measure it.\", /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"secondHeading\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Algebraic Fractals\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"We can also create fractals by repeatedly calculating a simple equation over and over. Because the equations must be calculated thousands or millions of times, we need computers to explore them. Not coincidentally, the Mandelbrot Set was discovered in 1980, shortly after the invention of the personal computer.\", /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"How does the Mandelbrot set work?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), \"The Koch Curve is made by repeatedly replacing each segment of a generator shape with a smaller copy of the generator. At each step, or iteration, the total length of the curve gets longer, eventually approaching infinity. Much like a coastline, the length of the curve increases the more closely you measure it.\", /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n_c = Doc;\nexport default Doc;\nvar _c;\n$RefreshReg$(_c, \"Doc\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Doc","className","id","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["/Users/valgaug/Documents/Coding/CodeWorks/SoloProject/solo-project/solo-project-proposal/client/src/Components/06-00-Documentation/index.js"],"sourcesContent":["import React from 'react';\nimport './style.css';\n\nfunction Doc() {\n  return (\n    <div className='doc' id='doc-id'>\n      <h1 className='firstHeading'>\n        <span>What is a fractal?</span>\n      </h1>\n      <p>\n        A fractal is a never ending pattern that repeats itself at different\n        scales. This property is called “Self-Similarity.” Fractals are\n        extremely complex, sometimes infinitely complex - meaning you can zoom\n        in and find the same shapes forever. Amazingly, fractals are extremely\n        simple to make. A fractal is made by repeating a simple process again\n        and again. You can find fractals in Nature, in Geometry and in Algebra.\n      </p>\n      <h1 className='secondHeading'>\n        <span>Natural Fractal</span>\n      </h1>\n      <h2>\n        <span>Branching</span>\n      </h2>\n      <p>\n        Fractals are found all over nature, spanning a huge range of scales. We\n        find the same patterns again and again, from the tiny branching of our\n        blood vessels and neurons to the branching of trees, lightning bolts,\n        and river networks. Regardless of scale, these patterns are all formed\n        by repeating a simple branching process. A fractal is a picture that\n        tells the story of the process that created it.\n        <img src='' alt=''></img>\n      </p>\n      <h2>\n        <span>Spiral</span>\n      </h2>\n      <p>\n        The spiral is another extremely common fractal in nature, found over a\n        huge range of scales. Biological spirals are found in the plant and\n        animal kingdoms, and non-living spirals are found in the turbulent\n        swirling of fluids and in the pattern of star formation in galaxies. All\n        fractals are formed by simple repetition, and combining expansion and\n        rotation is enough to generate the ubiquitous spiral.\n        <img src='' alt=''></img>\n      </p>\n      <h1 className='secondHeading'>\n        <span>Geometric Fractal</span>\n      </h1>\n      <p>\n        Purely geometric fractals can be made by repeating a simple process. The\n        Sierpinski Triangle is made by repeatedly removing the middle triangle\n        from the prior generation. The number of colored triangles increases by\n        a factor of 3 each step, 1,3,9,27,81,243,729, etc.\n        <img src='' alt=''></img>\n        The Koch Curve is made by repeatedly replacing each segment of a\n        generator shape with a smaller copy of the generator. At each step, or\n        iteration, the total length of the curve gets longer, eventually\n        approaching infinity. Much like a coastline, the length of the curve\n        increases the more closely you measure it.\n        <img src='' alt=''></img>\n      </p>\n      <h1 className='secondHeading'>\n        <span>Algebraic Fractals</span>\n      </h1>\n      <p>\n        We can also create fractals by repeatedly calculating a simple equation\n        over and over. Because the equations must be calculated thousands or\n        millions of times, we need computers to explore them. Not\n        coincidentally, the Mandelbrot Set was discovered in 1980, shortly after\n        the invention of the personal computer.\n        <h2>\n          <span>How does the Mandelbrot set work?</span>\n        </h2>\n        The Koch Curve is made by repeatedly replacing each segment of a\n        generator shape with a smaller copy of the generator. At each step, or\n        iteration, the total length of the curve gets longer, eventually\n        approaching infinity. Much like a coastline, the length of the curve\n        increases the more closely you measure it.\n        <img src='' alt=''></img>\n      </p>\n    </div>\n  );\n}\n\nexport default Doc;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}