{"ast":null,"code":"var _jsxFileName = \"/Users/valgaug/Documents/Coding/CodeWorks/SoloProject/solo-project/solo-project-proposal/client/src/Components/05-03-Mandelbrot/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport Sketch from 'react-p5';\nimport './style.css';\nimport canvasToImage from 'canvas-to-image';\nimport * as ApiService from '../../ApiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Fern(_ref) {\n  _s();\n  let {\n    hideMandelbrot,\n    setHideMandelbrot,\n    post,\n    setPost\n  } = _ref;\n  // const [iterations, setIterations] = useState(50000);\n  const canvasRef = useRef(null);\n  const setup = (p5, canvasParentRef) => {\n    p5.createCanvas(730, 520).parent(canvasParentRef);\n    p5.noLoop();\n    p5.pixelDensity(1);\n    canvasRef.current = p5.canvas;\n  };\n  const draw = p5 => {\n    p5.background(0);\n    p5.stroke(255);\n\n    // Establish a range of values on the complex plane\n    // A different range will allow us to \"zoom\" in or out on the fractal\n\n    // It all starts with the width, try higher or lower values\n    const w = 3.5;\n    const h = w * p5.height / p5.width;\n\n    // Start at negative half the width and height\n    const xmin = -w / 1.5;\n    const ymin = -h / 2;\n\n    // Make sure we can write to the pixels[] array.\n    // Only need to do this once since we don't do any other drawing.\n    p5.loadPixels();\n\n    // Maximum number of iterations for each point on the complex plane\n    const maxiterations = 100;\n\n    // x goes from xmin to xmax\n    const xmax = xmin + w;\n    // y goes from ymin to ymax\n    const ymax = ymin + h;\n\n    // Calculate amount we increment x,y for each pixel\n    const dx = (xmax - xmin) / p5.width;\n    const dy = (ymax - ymin) / p5.height;\n\n    // Start y\n    let y = ymin;\n    for (let j = 0; j < p5.height; j++) {\n      // Start x\n      let x = xmin;\n      for (let i = 0; i < p5.width; i++) {\n        // Now we test, as we iterate z = z^2 + cm does z tend towards infinity?\n        let a = x;\n        let b = y;\n        let n = 0;\n        while (n < maxiterations) {\n          const aa = a * a;\n          const bb = b * b;\n          const twoab = 2.0 * a * b;\n          a = aa - bb + x;\n          b = twoab + y;\n          // Infinity in our finite world is simple, let's just consider it 16\n          if (p5.dist(aa, bb, 0, 0) > 16) {\n            break; // Bail\n          }\n\n          n++;\n        }\n\n        // We color each pixel based on how long it takes to get to infinity\n        // If we never got there, let's pick the color black\n        const pix = (i + j * p5.width) * 4;\n        const hue = p5.map(n, 0, maxiterations, 0, 1);\n        let lig = p5.map(n, 0, maxiterations, 355, 0);\n        let colorHSB = p5.color(hue, 0.5, lig);\n        let colorRGB = colorHSB.levels;\n\n        // if (n === maxiterations) {\n        //   bright = 0;\n        // } else {\n        // Gosh, we could make fancy colors here if we wanted\n        p5.pixels[pix + 0] = colorRGB[0];\n        p5.pixels[pix + 1] = colorRGB[1];\n        p5.pixels[pix + 2] = colorRGB[2];\n        p5.pixels[pix + 3] = 255;\n        // }\n        x += dx;\n      }\n      y += dy;\n    }\n    p5.updatePixels();\n  };\n  const saveCanvasAsImage = async () => {\n    canvasToImage(canvasRef.current);\n  };\n  const postCanvasAsImage = async () => {\n    setHideMandelbrot(true);\n    await ApiService.postImage(canvasRef.current);\n    setPost(!post);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fern\",\n    style: {\n      display: hideMandelbrot ? 'none' : 'block'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Sketch, {\n      setup: setup,\n      draw: draw\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: postCanvasAsImage,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveCanvasAsImage,\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"close\",\n      onClick: () => setHideMandelbrot(true),\n      children: \"X\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(Fern, \"hw7YJ5TVw+lAu0tRkzoDS8rL7/E=\");\n_c = Fern;\nexport default Fern;\nvar _c;\n$RefreshReg$(_c, \"Fern\");","map":{"version":3,"names":["React","useState","useRef","Sketch","canvasToImage","ApiService","jsxDEV","_jsxDEV","Fern","_ref","_s","hideMandelbrot","setHideMandelbrot","post","setPost","canvasRef","setup","p5","canvasParentRef","createCanvas","parent","noLoop","pixelDensity","current","canvas","draw","background","stroke","w","h","height","width","xmin","ymin","loadPixels","maxiterations","xmax","ymax","dx","dy","y","j","x","i","a","b","n","aa","bb","twoab","dist","pix","hue","map","lig","colorHSB","color","colorRGB","levels","pixels","updatePixels","saveCanvasAsImage","postCanvasAsImage","postImage","className","style","display","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/valgaug/Documents/Coding/CodeWorks/SoloProject/solo-project/solo-project-proposal/client/src/Components/05-03-Mandelbrot/index.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport Sketch from 'react-p5';\nimport './style.css';\nimport canvasToImage from 'canvas-to-image';\nimport * as ApiService from '../../ApiService';\n\nfunction Fern({ hideMandelbrot, setHideMandelbrot, post, setPost }) {\n  // const [iterations, setIterations] = useState(50000);\n  const canvasRef = useRef(null);\n\n  const setup = (p5, canvasParentRef) => {\n    p5.createCanvas(730, 520).parent(canvasParentRef);\n    p5.noLoop();\n    p5.pixelDensity(1);\n    canvasRef.current = p5.canvas;\n  };\n\n  const draw = (p5) => {\n    p5.background(0);\n    p5.stroke(255);\n\n    // Establish a range of values on the complex plane\n    // A different range will allow us to \"zoom\" in or out on the fractal\n\n    // It all starts with the width, try higher or lower values\n    const w = 3.5;\n    const h = (w * p5.height) / p5.width;\n\n    // Start at negative half the width and height\n    const xmin = -w / 1.5;\n    const ymin = -h / 2;\n\n    // Make sure we can write to the pixels[] array.\n    // Only need to do this once since we don't do any other drawing.\n    p5.loadPixels();\n\n    // Maximum number of iterations for each point on the complex plane\n    const maxiterations = 100;\n\n    // x goes from xmin to xmax\n    const xmax = xmin + w;\n    // y goes from ymin to ymax\n    const ymax = ymin + h;\n\n    // Calculate amount we increment x,y for each pixel\n    const dx = (xmax - xmin) / p5.width;\n    const dy = (ymax - ymin) / p5.height;\n\n    // Start y\n    let y = ymin;\n    for (let j = 0; j < p5.height; j++) {\n      // Start x\n      let x = xmin;\n      for (let i = 0; i < p5.width; i++) {\n        // Now we test, as we iterate z = z^2 + cm does z tend towards infinity?\n        let a = x;\n        let b = y;\n        let n = 0;\n        while (n < maxiterations) {\n          const aa = a * a;\n          const bb = b * b;\n          const twoab = 2.0 * a * b;\n          a = aa - bb + x;\n          b = twoab + y;\n          // Infinity in our finite world is simple, let's just consider it 16\n          if (p5.dist(aa, bb, 0, 0) > 16) {\n            break; // Bail\n          }\n          n++;\n        }\n\n        // We color each pixel based on how long it takes to get to infinity\n        // If we never got there, let's pick the color black\n        const pix = (i + j * p5.width) * 4;\n        const hue = p5.map(n, 0, maxiterations, 0, 1);\n        let lig = p5.map(n, 0, maxiterations, 355, 0);\n\n        let colorHSB = p5.color(hue, 0.5, lig);\n        let colorRGB = colorHSB.levels;\n\n        // if (n === maxiterations) {\n        //   bright = 0;\n        // } else {\n        // Gosh, we could make fancy colors here if we wanted\n        p5.pixels[pix + 0] = colorRGB[0];\n        p5.pixels[pix + 1] = colorRGB[1];\n        p5.pixels[pix + 2] = colorRGB[2];\n        p5.pixels[pix + 3] = 255;\n        // }\n        x += dx;\n      }\n      y += dy;\n    }\n    p5.updatePixels();\n  };\n\n  const saveCanvasAsImage = async () => {\n    canvasToImage(canvasRef.current);\n  };\n\n  const postCanvasAsImage = async () => {\n    setHideMandelbrot(true);\n    await ApiService.postImage(canvasRef.current);\n    setPost(!post);\n  };\n\n  return (\n    <div\n      className='fern'\n      style={{\n        display: hideMandelbrot ? 'none' : 'block',\n      }}\n    >\n      <Sketch setup={setup} draw={draw} />\n      <form>\n        {/*       <div className='parameter'>\n          <span>Iterations (=nb of points):</span>\n          <label>{iterations}</label>\n          <input\n            type='range'\n            name='fern'\n            id='iteration'\n            min='0'\n            max='40000'\n            step='100'\n            value={iterations}\n            onChange={(e) => {\n              setIterations(e.target.value);\n            }}\n          ></input>\n        </div>\n        <div className='parameter'>\n          <span>Turning stems to leaves:</span>\n          <label>{param1}</label>\n          <input\n            type='range'\n            name='fern'\n            id='param1'\n            min='-0.5'\n            max='0.5'\n            step='0.01'\n            value={param1}\n            onChange={(e) => {\n              setParam1(e.target.value);\n            }}\n          ></input>\n          <br />\n        </div>\n        <div className='parameter'>\n          <span>Changing fern tilt:</span>\n          <label>{param2}</label>\n          <input\n            type='range'\n            name='fern'\n            id='param2'\n            min='-0.1'\n            max='0.1'\n            step='0.005'\n            value={param2}\n            onChange={(e) => {\n              setParam2(e.target.value);\n            }}\n          ></input>\n          <br />\n        </div> */}\n      </form>\n      <div className='buttons'>\n        <button onClick={postCanvasAsImage}>Submit</button>\n        <button onClick={saveCanvasAsImage}>Download</button>\n      </div>\n      <div className='close' onClick={() => setHideMandelbrot(true)}>\n        X\n      </div>\n    </div>\n  );\n}\n\nexport default Fern;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}