{"ast":null,"code":"const url = 'http://localhost:3001';\n\n// async function submitToServer() {\n//   let imageBlob = await new Promise((resolve) =>\n//     canvas.toBlob(resolve, 'image/png')\n//   );\n\n//   let formData = new FormData();\n//   formData.append('image', imageBlob, 'image.png');\n\n//   // modify the url accordingly\n//   let response = await fetch('http://localhost:8000/image', {\n//     method: 'POST',\n//     body: formData,\n//   });\n\n//   // convert the response to json, modify it accordingly based on the returned response from your remote server\n//   let result = await response.json();\n// }\n\nexport const postEvent = async event => {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(event)\n  };\n  await fetch(url + '/event', requestOptions);\n};\nexport const getImages = async () => {\n  let res = await fetch(url + '/image');\n  let buffer_images = await res.text();\n  let json_images = JSON.parse(buffer_images);\n  var image = new Image();\n  image.src = `data:image/png;base64,${json_images[0]}`;\n  // console.log(image);\n  return image;\n};","map":{"version":3,"names":["url","postEvent","event","requestOptions","method","headers","body","JSON","stringify","fetch","getImages","res","buffer_images","text","json_images","parse","image","Image","src"],"sources":["/Users/valgaug/Documents/Coding/CodeWorks/SoloProject/solo-project/solo-project-proposal/client/src/ApiService.js"],"sourcesContent":["const url = 'http://localhost:3001';\n\n// async function submitToServer() {\n//   let imageBlob = await new Promise((resolve) =>\n//     canvas.toBlob(resolve, 'image/png')\n//   );\n\n//   let formData = new FormData();\n//   formData.append('image', imageBlob, 'image.png');\n\n//   // modify the url accordingly\n//   let response = await fetch('http://localhost:8000/image', {\n//     method: 'POST',\n//     body: formData,\n//   });\n\n//   // convert the response to json, modify it accordingly based on the returned response from your remote server\n//   let result = await response.json();\n// }\n\nexport const postEvent = async (event) => {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(event),\n  };\n  await fetch(url + '/event', requestOptions);\n};\n\nexport const getImages = async () => {\n  let res = await fetch(url + '/image');\n  let buffer_images = await res.text();\n  let json_images = JSON.parse(buffer_images);\n  var image = new Image();\n  image.src = `data:image/png;base64,${json_images[0]}`;\n  // console.log(image);\n  return image;\n};\n"],"mappings":"AAAA,MAAMA,GAAG,GAAG,uBAAuB;;AAEnC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAOC,KAAK,IAAK;EACxC,MAAMC,cAAc,GAAG;IACrBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,KAAK;EAC5B,CAAC;EACD,MAAMO,KAAK,CAACT,GAAG,GAAG,QAAQ,EAAEG,cAAc,CAAC;AAC7C,CAAC;AAED,OAAO,MAAMO,SAAS,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAIC,GAAG,GAAG,MAAMF,KAAK,CAACT,GAAG,GAAG,QAAQ,CAAC;EACrC,IAAIY,aAAa,GAAG,MAAMD,GAAG,CAACE,IAAI,EAAE;EACpC,IAAIC,WAAW,GAAGP,IAAI,CAACQ,KAAK,CAACH,aAAa,CAAC;EAC3C,IAAII,KAAK,GAAG,IAAIC,KAAK,EAAE;EACvBD,KAAK,CAACE,GAAG,GAAI,yBAAwBJ,WAAW,CAAC,CAAC,CAAE,EAAC;EACrD;EACA,OAAOE,KAAK;AACd,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}